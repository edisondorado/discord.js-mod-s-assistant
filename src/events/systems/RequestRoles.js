const { ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, EmbedBuilder } = require("discord.js");
const { DiscordServers, DiscordServersRoleRequest } = require("../../models/model");
const isUserMod = require("../../middleware/isUserMod");

async function requestRoles(interaction) {
    const server = await DiscordServers.findOne({ id: interaction.guild.id });
    if (!server) return;

    const [targetId, ...roles] = extractValues(interaction.customId);
    const isMod = await isUserMod(interaction.guild.id, interaction.member);

    let targetRole;
    
    for (const roleId of roles[0]) {
        const matchingRoles = server.request_role.filter(role => role.roleId.includes(roleId));
        console.log(roleId)
        if (matchingRoles.length === 1) {
            targetRole = matchingRoles[0];
            break;
        }
    }

    console.log(targetRole)
    
    const doesHaveAccess = hasAccessRole(interaction.member, targetRole.hasAccess);

    if (!isMod && !doesHaveAccess) {
        return await interaction.reply({
            content: `\`[‚ùå] –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤!\``,
            ephemeral: true
        });
    }

    const target = await interaction.guild.members.cache.get(targetId);
    if (!target) {
        return await interaction.reply({
            content: `\`[‚ùå] –ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∏/–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ Discord —Å–µ—Ä–≤–µ—Ä–∞!\``,
            ephemeral: true
        });
    }

    if (interaction.customId.startsWith("AcceptRole_")) {
        for (const roleId of roles) {
            await target.roles.add(roleId);
        }
        await interaction.message.delete();
        await interaction.channel.send({
            content: `\`[‚úÖ] \`<@${interaction.member.id}>\` –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`<@${targetId}>\` —Å –Ω–∏–∫–æ–º ${target.nickname}\``
        });

        await DiscordServersRoleRequest.findOneAndUpdate(
            {
                userId: targetId,
                guildId: interaction.guild.id,
                active: true
            },
            { $set: { active: false } },
            { new: true }
        );
    }

    if (interaction.customId.startsWith("DeclineRole_")) {
        await interaction.message.delete();
        await interaction.channel.send({
            content: `\`[‚ùå] \`<@${interaction.member.id}>\` –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`<@${targetId}>\` —Å –Ω–∏–∫–æ–º ${target.nickname}\``
        });

        await DiscordServersRoleRequest.findOneAndUpdate(
            {
                userId: targetId,
                guildId: interaction.guild.id,
                active: true
            },
            { $set: { active: false } },
            { new: true }
        );

        await interaction.reply({
            content: `\`[‚úÖ] –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\``,
            ephemeral: true
        });
    }

    if (interaction.customId.startsWith("TrashRole_")) {
        await interaction.message.delete();
        await interaction.channel.send({
            content: `\`[üóëÔ∏è] \`<@${interaction.member.id}>\` —É–¥–∞–ª–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`<@${targetId}>\` —Å –Ω–∏–∫–æ–º ${target.nickname}\``
        });

        await DiscordServersRoleRequest.findOneAndUpdate(
            {
                userId: targetId,
                guildId: interaction.guild.id,
                active: true
            },
            { $set: { active: false } },
            { new: true }
        );

        await interaction.reply({
            content: `\`[‚úÖ] –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\``,
            ephemeral: true
        });
    }

    if (interaction.customId.startsWith("StatsRole_")) {
        const server = await DiscordServers.findOne({ id: interaction.guild.id });
        const channel = await interaction.guild.channels.cache.get(server.requestRoleChannel);
        if (channel) {
            await channel.send({
                content: `\`[üì®] \`<@${targetId}>\`: \`<@${interaction.member.id}>\` –∑–∞–ø—Ä–æ—Å–∏–ª –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏.\``
            });

            await interaction.reply({
                content: `\`[‚úÖ] –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ: \`<#${channel.id}>`,
                ephemeral: true
            });
        }
    }
}


async function modalRoles(interaction){
    const server = await DiscordServers.findOne({ id: interaction.guild.id })
    if (!server.requestChannel) return;

    const doesChannelExist = await interaction.guild.channels.cache.has(server.requestChannel)
    if(!doesChannelExist) return;

    const activeRequest = await DiscordServersRoleRequest.findOne(
        {
            userId: interaction.member.id,
            guildId: interaction.guild.id,
            active: true
        }
    );

    if (activeRequest && new Date().getTime() - activeRequest.hasSent < 24 * 60 * 60 * 1000) return await interaction.reply({
        content: "`[‚ùå] –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏!`",
        ephemeral: true
    })

    await DiscordServersRoleRequest.create({
        userId: interaction.member.id,
        guildId: interaction.guild.id,
        hasSent: new Date().getTime(),
        active: true
    })

    const channel = await interaction.guild.channels.cache.get(server.requestChannel);
    const parts = interaction.customId.split("_");
    const roleIds = parts.slice(1, 3);
    
    let targetRole;
    
    for (const roleId of roleIds) {
        const matchingRoles = server.request_role.filter(role => role.roleId.includes(roleId));
        
        if (matchingRoles.length === 1) {
            targetRole = matchingRoles[0];
            break;
        }
    }

    const nick = interaction.fields.getTextInputValue("nick");
    const rank = interaction.fields.getTextInputValue("rank");

    if (!/^[1-9]$/.test(rank)) return await interaction.reply({
        content: `\`[‚ùå] –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–Ω–≥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 1-9\``,
        ephemeral: true
    })

    if (!isNickNameFormat(nick)) return await interaction.reply({
        content: `\`[‚ùå] –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: Nick_Name\``,
        ephemeral: true
    })

    const roleIdArray = server.request_role.flatMap(role => role.roleId);
    
    if (hasAccessRole(interaction.member, roleIdArray)) return await interaction.reply({
        content: `\`[‚ùå] –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–æ–ª—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–æ–ª–µ–π.\``,
        ephemeral: true
    })

    await interaction.member.setNickname(`${targetRole.tag}[${rank}] ${nick}`)

    const embed = new EmbedBuilder()
        .setTitle("**üì© | –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏**")
        .addFields(
            {
                name: "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**",
                value: `<@${interaction.member.id}>`,
                inline: true,
            },
            {
                name: "**–ù–∏–∫–Ω–µ–π–º:**",
                value: `${interaction.member.nickname}`,
                inline: true
            },
            {
                name: "**–†–æ–ª—å:**",
                value: `${roleIds.map(item => `<@&${item}>`).join(", ")}`,
                inline: true
            },
            {
                name: "**–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:**",
                value: `\`[‚úÖ] - –æ–¥–æ–±—Ä–∏—Ç—å —Ä–æ–ª—å\`\n\`[‚ùå] - –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏\`\n\`[üóëÔ∏è] - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å\`\n\`[üì®] - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\``,
                inline: false
            },
        )

    const buttons = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`AcceptRole_${interaction.member.id}_${roleIds.join("_")}`)
                .setEmoji({ name: "‚úÖ" })
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId(`DeclineRole_${interaction.member.id}_${roleIds.join("_")}`)
                .setEmoji({ name: "‚ùé" })
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId(`TrashRole_${interaction.member.id}_${roleIds.join("_")}`)
                .setEmoji({ name: "üóëÔ∏è" })
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId(`StatsRole_${interaction.member.id}_${roleIds.join("_")}`)
                .setEmoji({ name: "üì®" })
                .setStyle(ButtonStyle.Secondary),
        )

    await channel.send({
        content: `${targetRole.hasAccess.map(item => `<@&${item}>`).join(", ")}`,
        embeds: [embed],
        components: [buttons]
    })
        .then(async (message) => {
            await message.pin()
        })

    await interaction.reply({
        content: `\`[‚úÖ] –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\``,
        ephemeral: true
    })
}

async function menuRoles(interaction){
    const roleId = interaction.values[0];

    const activeRequest = await DiscordServersRoleRequest.findOne(
        {
            userId: interaction.member.id,
            guildId: interaction.guild.id,
            active: true
        }
    );

    if (activeRequest && new Date().getTime() - activeRequest.hasSent < 24 * 60 * 60 * 1000) return await interaction.reply({
        content: "`[‚ùå] –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏!`",
        ephemeral: true
    })

    const selectRoleModal = new ModalBuilder()
        .setCustomId(`selectRole_${roleId}`)
        .setTitle("–ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏");

    const rankInput = new TextInputBuilder()
        .setCustomId("rank")
        .setLabel("–†–∞–Ω–≥ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏:")
        .setPlaceholder("1-9")
        .setStyle(TextInputStyle.Short);

    const nickInput = new TextInputBuilder()
        .setCustomId("nick")
        .setLabel("–ù–∏–∫–Ω–µ–π–º:")
        .setPlaceholder("Alan_Butler")
        .setStyle(TextInputStyle.Short);

    const rankActionRow = new ActionRowBuilder().addComponents(rankInput);
    const nickActionRow = new ActionRowBuilder().addComponents(nickInput);

    selectRoleModal.addComponents(rankActionRow, nickActionRow);

    await interaction.showModal(selectRoleModal);
}

function isNickNameFormat(input) {
    const regex = /^(?:[A-Z][a-z]*_?[A-Z][a-z]*|[A-Z][a-z]* [A-Z][a-z]*)$/;
    return regex.test(input);
}

function extractValues(inputString) {
    const parts = inputString.split('_');
    const firstValue = parts[1];
    const subsequentValues = parts.slice(2);
    return [firstValue, subsequentValues];
}

function hasAccessRole(member, rolesObject){
    const userRoles = member.roles.cache;

    let hasRole = false;

    rolesObject.forEach(item => {
        if (userRoles.has(item)){
            hasRole = true;
        }
    });
    if (hasRole) return true
    else return false;
}

module.exports = {requestRoles, modalRoles, menuRoles};