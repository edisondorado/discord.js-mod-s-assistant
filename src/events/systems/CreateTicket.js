const { ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { DiscordServers, DiscordServersTicketBan, DiscordServersTicket, DiscordServersMods } = require("../../models/model");
const fs = require('fs');

async function CreateTicket(interaction) {
    await interaction.deferReply({ ephemeral: true });

    const server = await DiscordServers.findOne({ id: interaction.guild.id });
    if (!server) return;

    const currentTimeInMillis = new Date().getTime();

    const hasBlock = await DiscordServersTicketBan.findOne({ guildId: interaction.guild.id, userId: interaction.member.id, expiresOn: { $gt: currentTimeInMillis } });
    if (hasBlock) {
        return await interaction.editReply({
            content: `\`[‚ùå] –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤!\`\n\n**–í—ã–¥–∞–ª:** <@${hasBlock.mod}>\n**–ü—Ä–∏—á–∏–Ω–∞:** ${hasBlock.reason}\n**–ò—Å—Ç–µ–∫–∞–µ—Ç:** <t:${Math.floor(hasBlock.expiresOn / 1000)}:R>`,
        });
    }

    const channel = interaction.guild.channels.cache.get(server.ticketLogChannel);
    if (!channel) {
        return await interaction.editReply({
            content: "\`[‚ùå] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞! –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\`",
        });
    }

    const typeButton = interaction.customId.split("_").pop();

    const thread = await interaction.channel.threads.create({
        name: `${typeButton} | ${interaction.member.user.username}`,
        autoArchiveDuration: 60,
        type: ChannelType.PrivateThread,
        reason: `Ticket from ${interaction.member.user.username}`,
        invitable: false,
    });

    const embedThread = {
        color: 0xffd817,
        title: `**üî® | –û–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**`,
        description: "\`\`\`\n–î–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω—è–ª–∞—Å—å –∑–∞ –≤–∞—à —Ç–∏–∫–µ—Ç - –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞—Ç—å —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.\n\`\`\`",
        timestamp: new Date().toISOString(),
        footer: {
            text: interaction.guild.name,
            icon_url: interaction.guild.iconURL(),
        },
    };

    const embedLog = {
        color: 0xffd817,
        title: `**üìå | –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç**`,
        fields: [
            {
                name: "**–ê–≤—Ç–æ—Ä:**",
                value: `<@${interaction.member.id}> (\`${interaction.member.id}\`)`,
                inline: true,
            },
            {
                name: "**–¢–∏–ø —Ç–∏–∫–µ—Ç–∞:**",
                value: `${typeButton}`,
                inline: true
            },
            {
                name: "**–°–æ–∑–¥–∞–Ω:**",
                value: `<t:${Math.floor(currentTimeInMillis / 1000)}>`,
                inline: true
            }
        ],
        timestamp: new Date().toISOString(),
        footer: {
            text: interaction.guild.name,
            icon_url: interaction.guild.iconURL(),
        },
    };

    const component = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`TakeTicket_${thread.id}`)
                .setLabel("–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç")
                .setStyle(ButtonStyle.Success)
        );

    const botMessage = await thread.send({
        content: "",
        embeds: [embedThread]
    });

    const modMessage = await channel.send({
        content: `<@&${server.ticketRole}>`,
        embeds: [embedLog],
        components: [component]
    });

    await modMessage.pin();

    await thread.send(`<@${interaction.member.id}>`);

    await interaction.editReply({
        content: '`[‚úÖ] –¢–∏–∫–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`\n`–¢–∏–∫–µ—Ç:` <#' + thread.id + '>',
    });

    await DiscordServersTicket.create({
        guildId: interaction.guild.id,
        author: interaction.member.id,
        createdAt: currentTimeInMillis,
        threadId: thread.id,
        botMessageId: botMessage.id,
        modMessageId: modMessage.id,
        active: true
    });

};


async function AcceptTicket(interaction) {
    const server = await DiscordServers.findOne({ id: interaction.guild.id })
    if (!server) return;

    const hasRole = await interaction.member.roles.cache.has(server.ticketRole)
    if(!hasRole) return;

    const threadId = interaction.customId.split("_").pop();

    const thread = await interaction.guild.channels.fetch(threadId);

    const ticket = await DiscordServersTicket.findOne({
        guildId: interaction.guild.id,
        threadId: threadId
    })
    if (!ticket) return await interaction.reply({
        content: `\`[‚ùå] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–∏–∫–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\``
    })

    const embedLog = interaction.message.embeds[0].data;

    embedLog.fields.push({ name: "–¢–∏–∫–µ—Ç –±—ã–ª –≤–∑—è—Ç:", value: `<@${interaction.member.id}>` })
    embedLog.title = `‚úÖ | –¢–∏–∫–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç ${interaction.member.user.username}`
    embedLog.color = 0x00ff00;

    await interaction.message.edit({ embeds: [embedLog], components: [] })
        .then(async msg => {
            await msg.unpin()
        })

    ticket.mod = interaction.member.id;
    await ticket.save();

    await thread.members.add(interaction.member.id);
    await thread.send(`<@${interaction.member.id}>`)

    const botMessage = await thread.messages.fetch(ticket.botMessageId);
    let embed = botMessage.embeds[0].data;

    embed.title = `‚úÖ | –¢–∏–∫–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç ${interaction.member.user.username}`;
    embed.description = `–†–∞—Å–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`
    embed.color = 0x00ff00

    const component = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`CloseTicket_${thread.id}`)
                .setEmoji({name: "üîí"})
                .setLabel("–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
                .setStyle(ButtonStyle.Secondary)
        )

    await botMessage.edit({ embeds: [embed], components: [component] });
}

async function CloseTicket(interaction){
    const server = await DiscordServers.findOne({ id: interaction.guild.id })
    if (!server) return;

    const threadId = interaction.customId.split("_").pop();
    const thread = await interaction.guild.channels.fetch(threadId);

    const ticket = await DiscordServersTicket.findOne({
        guildId: interaction.guild.id,
        threadId: threadId
    })

    ticket.active = false;
    await ticket.save();

    const messages = await thread.messages.fetch();

    const fileName = `messages_${threadId}.txt`;
    let formattedMessages = '';

    messages.forEach(message => {
        if (!message.author.bot){
            formattedMessages += `${message.author.username}(${message.author.id}): ${message.content}\n`;
        }
    });

    fs.writeFileSync(fileName, formattedMessages);

    const channel = await interaction.guild.channels.fetch(server.ticketLogChannel);

    await channel.send({
        content: `\`[‚úÖ] –¢–∏–∫–µ—Ç \`<#${threadId}>\` –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\``,
        files: [{
            attachment: fileName,
            name: `messages_${threadId}.txt`
        }]
    });

    fs.unlinkSync(fileName);

    const members = await thread.members.fetch();
    for (const [memberId, member] of members) {
        await thread.members.remove(memberId);
    }
    await thread.setLocked(true);

    if (formattedMessages !== ""){
        const moderator = await DiscordServersMods.findOne({
            server: interaction.guild.id,
            id: ticket.mod
        })
                    
        var newInfraction = { type: "ticket", mod: ticket.mod, date: new Date().getTime(), reason: "null" }

        if(!moderator){
            await DiscordServersMods.create({
                id: ticket.mod,
                server: interaction.guild.id,
                infractions: [newInfraction]
            })
        } else {
            await DiscordServersMods.findOneAndUpdate({ id: ticket.mod, server: interaction.guild.id }, { $push: { infractions: newInfraction } });
        }
    }
}

module.exports = { CreateTicket, AcceptTicket, CloseTicket };