const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require("discord.js");
const { DiscordServersVoteBan } = require("../../models/model");

const isUserMod = require("../../middleware/isUserMod");
const doesServerExist = require("../../middleware/doesServerExist");

const showError = require("../../dev/showError");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("voteban")
        .setDescription("–ü—Ä–æ–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        .addUserOption(option => 
            option
                .setName("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                .setDescription("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±–∞–Ω–∏—Ç—å")
                .setRequired(true))
        .addNumberOption(option =>
            option
                .setName("–¥–Ω–∏")
                .setDescription("–í—Ä–µ–º—è –±–∞–Ω–∞")
                .setRequired(true))
        .addStringOption(option =>
            option
                .setName("–ø—Ä–∏—á–∏–Ω–∞")
                .setDescription("–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞")
                .setRequired(true))
        .addStringOption(option =>
            option
                .setName("–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
                .setDescription("-")
                .setRequired(false)),
    async execute(interaction) {
        const [exist, server] = await doesServerExist(interaction.guild.id)
        if (!exist) return interaction.reply({content: `\`[‚ùå] –î–∞–Ω–Ω—ã–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.\``, ephemeral: true})

        const isMod = await isUserMod(interaction.guild.id, interaction.member, server["voteban"]);
        if (!isMod) return;
        
        var target;
        var onServer = false;
        if (interaction.options.getMember("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") !== null) {
            target = interaction.options.getMember("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
            onServer = true;
        }
        else target = interaction.options.getUser("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");

        const time = interaction.options.getNumber("–¥–Ω–∏");
        const reason = interaction.options.getString("–ø—Ä–∏—á–∏–Ω–∞");
        const evidence = interaction.options.getString("–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞");
        
        const alreadyExist = await DiscordServersVoteBan.findOne({ guildId: interaction.guild.id, userId: target.id })
        if (alreadyExist && alreadyExist.activeUntil > new Date().getTime()) return await interaction.reply({
            content: "\`[‚ùå] –ù–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!\`",
            ephemeral: true
        })

        const maxDuration = 666;
        const voteDuration = new Date().getTime() + 6 * 60 * 60 * 1000;
        if (onServer){    
            if (target.permissions.has(PermissionsBitField.All)) return await interaction.reply({
                content: "\`[‚ùå] –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!\`",
                ephemeral: true
            })
    
            if (interaction.member.id === target.id){
                return interaction.reply({
                    content: "\`[‚ùå] –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ —Å–µ–±–µ!\`",
                    ephemeral: true
                })
            }
    
            if (interaction.member.id === interaction.client.id){
                return interaction.reply({
                    content: "\`[‚ùå] –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ –º–Ω–µ!\`",
                    ephemeral: true
                })
            }

            var hasProhibitedRole = false;
            for (const roleId of server.ignoreRoles) {
                const role = target.guild.roles.cache.find(r => r.id === roleId);
                if (role && target.roles.cache.has(role.id)) {
                    hasProhibitedRole = true;
                    break;
                }
            }
            
            if (hasProhibitedRole) return await interaction.reply({
                content: "\`[‚ùå] –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!\`",
                ephemeral: true
            });
        }

        if (time > maxDuration){
            return interaction.reply({
                content: "\`[‚ùå] –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 120 –¥–Ω–µ–π –∏–ª–∏ –º–µ–Ω—å—à–µ!\`",
                ephemeral: true
            })
        }

        try{
            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`acceptVoteBan_${target.id}`)
                        .setEmoji({name: "‚úÖ"})
                        .setLabel("–û–¥–æ–±—Ä–∏—Ç—å")
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId(`declineVoteBan_${target.id}`)
                        .setEmoji({name: "‚õî"})
                        .setLabel("–û—Ç–∫–∞–∑–∞—Ç—å")
                        .setStyle(ButtonStyle.Danger)
                )

            const embed = {
                color: 0x0099ff,
                title: `**üî® | –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**`,
                description: `**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** <@${target.id}>\n**–ü—Ä–∏—á–∏–Ω–∞:** ${reason}\n**–í—Ä–µ–º—è:** ${time} –¥–Ω–µ–π\n**–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:** ${evidence ? evidence : "\`–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã\`"}\n\n**–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è <t:${Math.floor(voteDuration/1000)}:R>**`,
                thumbnail: {
                    url: target.displayAvatarURL(),
                },
                fields: [
                    {
                        name: '–û–¥–æ–±—Ä–∏–ª–∏:',
                        value: `<@${interaction.member.id}>`,
                        inline: true
                    },
                    {
                        name: '–û—Ç–∫–∞–∑–∞–ª–∏:',
                        value: ' ',
                        inline: true,
                    }
                ],
                timestamp: new Date().toISOString(),
                footer: {
                    text: interaction.guild.name,
                    icon_url: interaction.guild.iconURL(),
                },
            };

            const message = await interaction.channel.send({
                content: `<@&${server.modRole}>`,
                embeds: [embed],
                components: [buttons]
            })

            await DiscordServersVoteBan.create({
                guildId: interaction.guild.id,
                allowedToVote: server.modRole,
                activeUntil: voteDuration,
                userId: target.id,
                time: time,
                messageId: message.id,
                channelId: interaction.channel.id,
                reason: reason,
                expiresOn: new Date().getTime() + (time * 24 * 60 * 60 * 1000) + (6 * 60 * 60 * 1000),
                voted: [
                    {
                        userId: interaction.member.id,
                        vote: true
                    }
                ]
            })
                .then(async () => {
                    await interaction.reply({
                        content: "`[‚úÖ] –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!`",
                        ephemeral: true
                    })
                })
            
        } catch(error){
            console.warn("[ERROR] Error occured while ban: ", error)
            await showError(error, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ!", interaction)
        }
    }
}