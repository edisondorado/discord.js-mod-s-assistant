const { SlashCommandBuilder, ActionRowBuilder, ButtonStyle, ButtonBuilder } = require("discord.js");
const { DiscordServersMods } = require("../../models/model");

const isUserMod = require("../../middleware/isUserMod");
const doesServerExist = require("../../middleware/doesServerExist");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("fa")
        .setDescription("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–∫–Ω–æ–º –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        .addSubcommand(subcommand =>
            subcommand
                .setName("–≤—ã–∑–≤–∞—Ç—å")
                .setDescription("–í—ã–∑–≤–∞—Ç—å –æ–∫–Ω–æ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"))
        .addSubcommand(subcommand =>
            subcommand
                .setName("—Å–æ–∑–¥–∞—Ç—å")
                .setDescription("–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É"))
        .addSubcommand(subcommand =>
            subcommand
                .setName("—É–¥–∞–ª–∏—Ç—å")
                .setDescription("–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É")
                .addStringOption(option =>
                    option
                        .setName("–Ω–∞–∑–≤–∞–Ω–∏–µ")
                        .setDescription("–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏")
                        .setRequired(true)))
        ,
    async execute(interaction) {
        const [exist, server] = await doesServerExist(interaction.guild.id)
        if (!exist) return interaction.reply({content: `\`[‚ùå] –î–∞–Ω–Ω—ã–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.\``, ephemeral: true})

        const isMod = await isUserMod(interaction.guild.id, interaction.member);
        if (!isMod) return;

        const moderator = await DiscordServersMods.findOne({ id: interaction.member.id, server: interaction.guild.id })

        if (interaction.options.getSubcommand() === "–≤—ã–∑–≤–∞—Ç—å"){
            if (moderator.fastaction.length > 0) {
                const embed = {
                    title: `**üõ† | –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã**`,
                    description: "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ",
                    color: 0x32a8a0
                }
    
                const buttons = new ActionRowBuilder()
                    .addComponents(
                        moderator.fastaction.map(item => (
                            new ButtonBuilder()
                                .setLabel(item.name)
                                .setCustomId(item.name)
                                .setStyle(ButtonStyle.Success)
                        ))
                    )
    
                await interaction.reply({
                    content: "",
                    embeds: [embed],
                    components: [buttons],
                    ephemeral: true
                })
            } else {
                await interaction.reply({
                    content: `\`[‚ùå] –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: /fa —Å–æ–∑–¥–∞—Ç—å\``,
                    ephemeral: true
                })
            }


            const filter = i => i.user.id === interaction.user.id;

            const collector = interaction.channel.createMessageComponentCollector({ filter, time: 15000 });

            collector.on('collect', async i => {
                try {
                    const index = moderator.fastaction.findIndex(field => field.name === i.customId)
                    if (index !== -1){
                        if (moderator.fastaction[index].embed){
                            const embedButton = {
                                author: {
                                    name: `${interaction.member.nickname !== null ? interaction.member.nickname : interaction.member.user.username}`,
                                    icon_url: interaction.user.displayAvatarURL(),
                                },
                                description: moderator.fastaction[index].content,
                                color: 0x32a8a0
                            }

                            await interaction.channel.send({
                                content: "",
                                embeds: [embedButton]
                            })
                        } else {
                            await interaction.channel.send({
                                content: `${moderator.fastaction[index].content}\n\n\`[–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞]:\` <@${interaction.member.id}>`
                            })
                        }
                        await i.reply({content: "`[‚úÖ] –û—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`", ephemeral: true})
                    }
                } catch (error) {
                    console.error(error);
                }
            }); 
        } else if (interaction.options.getSubcommand() === "—Å–æ–∑–¥–∞—Ç—å"){
            await interaction.deferReply({ ephemeral: false });

            var sentMessage = await interaction.channel.send(`**–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è(60 —Å–µ–∫—É–Ω–¥)**`);
            const collectorName = interaction.channel.createMessageCollector({ time: 60_000 });

            var newField = {}

            collectorName.on('collect', async m => {
                newField.name = m.content;
                await m.delete(1);
                await sentMessage.delete(1);
                collectorName.stop();
            });

            collectorName.on('end', async collected => {
                var sentValueMessage = await interaction.channel.send(`**–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–ª—è "${newField.name}"(60 —Å–µ–∫—É–Ω–¥)**`);
                const collectorValue = interaction.channel.createMessageCollector({ time: 60_000 });

                collectorValue.on('collect', async m => {
                    newField.content = m.content;
                    await m.delete(1);
                    await sentValueMessage.delete(1);

                    collectorValue.stop();
                });

                collectorValue.on('end', async collected => {
                    var sentInlineMessage = await interaction.channel.send(`**–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Embed –æ–∫–Ω–µ? –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".(60 —Å–µ–∫—É–Ω–¥)**`);
                    const collectorInline = interaction.channel.createMessageCollector({ time: 60_000 });

                    collectorInline.on('collect', async m => {
                        const response = m.content.toLowerCase();
                        if (response === '–¥–∞') {
                            newField.embed = true;
                        } else if (response === '–Ω–µ—Ç') {
                            newField.embed = false;
                        } else {
                            await m.delete(1);
                            await m.channel.send("**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.**");
                            return;
                        }
                        await m.delete(1)
                        await sentInlineMessage.delete(1);

                        if (!newField.name || !newField.content) return interaction.channel.send("**–û–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.**");

                        const index = moderator.fastaction.findIndex(field => field.name === newField.name)
                        if (index !== -1) return await interaction.reply({
                            content: `\`[‚ùå] –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\``,
                            ephemeral: true
                        })
                        
                        moderator.fastaction.push(newField)
                        await moderator.save()

                        await interaction.editReply(`**–ù–æ–≤—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.**`)
                        collectorInline.stop();
                    });
                });
            });
        } else if (interaction.options.getSubcommand() === "—É–¥–∞–ª–∏—Ç—å"){
            if (!moderator.fastaction) return await interaction.reply({
                content: `\`[‚ùå] –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: /fa —Å–æ–∑–¥–∞—Ç—å\``,
                ephemeral: true
            })

            const name = interaction.options.getString("–Ω–∞–∑–≤–∞–Ω–∏–µ");
            const index = moderator.fastaction.findIndex(field => field.name === name)
            if (index === -1) return await interaction.reply({
                content: `\`[‚ùå] –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\``,
                ephemeral: true
            })
            
            moderator.fastaction.splice(index, 1)

            await moderator.save()

            await interaction.reply({
                content: `\`[‚úÖ] –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç \"${name}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\``,
                ephemeral: true
            })
        } 
    }
}