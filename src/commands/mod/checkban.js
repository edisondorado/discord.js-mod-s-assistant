const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");

const { DiscordServersBans } = require("../../models/model");

const doesServerExist = require("../../middleware/doesServerExist");
const isUserMod = require("../../middleware/isUserMod");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("checkban")
        .setDescription("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É(–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞)")
        .addStringOption(option => 
            option
                .setName("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                .setDescription("-")
                .setRequired(true)),
    async execute(interaction) {
        const [exist, server] = await doesServerExist(interaction.guild.id)
        if (!exist) return interaction.reply({content: `\`[‚ùå] –î–∞–Ω–Ω—ã–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.\``, ephemeral: true})

        const isMod = await isUserMod(interaction.guild.id, interaction.member, server["checkban"]);
        if (!isMod) return;

        const target = interaction.options.getString("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");

        const user = await DiscordServersBans.findOne({ id: target })
        if (!user) return interaction.reply({
            content: "\`[‚ùå] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö!\`",
            ephemeral: true
        })

        const embed = new EmbedBuilder()
            .setTitle("üî® | –ê–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞")
            .setDescription(`**Discord ID:** ${user.id}\n**–í—ã–¥–∞–ª:** <@${user.mod}>\n**–ü—Ä–∏—á–∏–Ω–∞:** ${user.reason}\n**–ò—Å—Ç–µ–∫–∞–µ—Ç:** <t:${Math.floor(user.expiresOn / 1000)}>`)
            .setTimestamp()
            .setFooter({ text: interaction.member.user.username, iconURL: interaction.member.displayAvatarURL() })

        await interaction.reply({
            content: "",
            embeds: [embed],
            ephemeral: true
        })
    }
}