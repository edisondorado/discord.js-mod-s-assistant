const { SlashCommandBuilder, ChannelType, PermissionsBitField } = require("discord.js");
const { DiscordServers } = require("../../models/model");

const doesServerExist = require("../../middleware/doesServerExist");

const logChannels = [
    {
        name: "üîß‚îÉ–∏–∑–º–µ–Ω–µ–Ω–∏–µ-—Ä–æ–ª–µ–π",
        var: "logRole"
    },
    {
        name: "üìù‚îÉ–∫–∞–Ω–∞–ª—ã",
        var: "logChannel"
    },
    {
        name: "üìß‚îÉ—Å–æ–æ–±—â–µ–Ω–∏—è",
        var: "logMessage"
    },
    {
        name: "üîä‚îÉ–≥–æ–ª–æ—Å–æ–≤—ã–µ-–∫–∞–Ω–∞–ª—ã",
        var: "logVoice"
    },
    {
        name: "ü§¶‚îÉ—É—á–∞—Å—Ç–Ω–∏–∫–∏",
        var: "logUsers"
    },
]

module.exports = {
    data: new SlashCommandBuilder()
        .setName("log-channels")
        .setDescription("–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"),
    async execute(interaction){
        if (!interaction.member.permissions.has(PermissionsBitField.All)) return;

        const [exist, _] = await doesServerExist(interaction.guild.id)
        if (!exist) return interaction.reply({content: `\`[‚ùå] –î–∞–Ω–Ω—ã–π –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π.\``, ephemeral: true})

        const server = await DiscordServers.findOne({ id: interaction.guild.id })

        logChannels.forEach(async item => {
            const channel = await interaction.guild.channels.create({
                name: item.name,
                type: ChannelType.GuildText,
                permissionOverwrites: [
                    {
                        id: interaction.guild.id,
                        deny: [PermissionsBitField.Flags.ViewChannel],
                    }
                ],
            })

            server[item.var] = channel.id;
            await server.save()
        })

        await interaction.reply({
            content: "`[‚úÖ] –ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!`",
            ephemeral: true
        })
    }
}